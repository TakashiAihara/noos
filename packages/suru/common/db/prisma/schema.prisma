// Suru Task Management System - Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Context
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  displayName  String   @map("display_name")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  lastLoginAt  DateTime @updatedAt @map("last_login_at")

  // Relations
  oauthProviders  OAuthProvider[]
  teamMemberships TeamMember[]
  createdTasks    Task[]          @relation("CreatedTasks")
  assignedTasks   Task[]          @relation("AssignedTasks")
  notifications   Notification[]
  createdTeams    Team[]          @relation("CreatedTeams")
  createdProjects Project[]       @relation("CreatedProjects")

  @@map("users")
}

model OAuthProvider {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  provider     String   // 'GOOGLE' | 'GITHUB'
  externalId   String   @map("external_id")
  accessToken  String   @map("access_token") // Encrypted
  refreshToken String?  @map("refresh_token") // Encrypted
  expiresAt    DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, externalId])
  @@map("oauth_providers")
}

// Team Context
model Team {
  id        String   @id @default(uuid())
  name      String
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  members  TeamMember[]
  projects Project[]
  creator  User         @relation("CreatedTeams", fields: [createdBy], references: [id])

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(uuid())
  teamId   String   @map("team_id")
  userId   String   @map("user_id")
  role     String   // 'OWNER' | 'ADMIN' | 'MEMBER'
  joinedAt DateTime @default(now()) @map("joined_at")

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Project {
  id          String   @id @default(uuid())
  teamId      String   @map("team_id")
  name        String
  description String?
  archived    Boolean  @default(false)
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creator User   @relation("CreatedProjects", fields: [createdBy], references: [id])
  tasks   Task[]

  @@unique([teamId, name])
  @@map("projects")
}

// Task Context
model Task {
  id           String    @id @default(uuid())
  title        String
  description  String?
  status       String    // 'TODO' | 'IN_PROGRESS' | 'DONE'
  priority     String    // 'LOW' | 'MEDIUM' | 'HIGH'
  dueDate      DateTime? @map("due_date")
  projectId    String    @map("project_id")
  assigneeId   String?   @map("assignee_id")
  parentTaskId String?   @map("parent_task_id")
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  version      Int       @default(0) // Optimistic locking

  // Relations
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee   User?          @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator    User           @relation("CreatedTasks", fields: [createdBy], references: [id])
  parentTask Task?          @relation("Subtasks", fields: [parentTaskId], references: [id])
  subtasks   Task[]         @relation("Subtasks")
  tags       TaskTag[]
  notifications Notification[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  tasks TaskTag[]

  @@map("tags")
}

model TaskTag {
  taskId String @map("task_id")
  tagId  String @map("tag_id")

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tags")
}

// Notification Context
model Notification {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  type         String    // 'TASK_ASSIGNED' | 'TASK_MENTIONED' | 'DUE_DATE_REMINDER' | 'TASK_UPDATED'
  message      String
  taskId       String?   @map("task_id")
  readAt       DateTime? @map("read_at")
  deliveredAt  DateTime? @map("delivered_at")
  scheduledFor DateTime? @map("scheduled_for")
  createdAt    DateTime  @default(now()) @map("created_at")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([readAt])
  @@map("notifications")
}

model PushSubscription {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  deviceToken  String   @map("device_token")
  platform     String   // 'WEB' | 'IOS' | 'ANDROID'
  subscribedAt DateTime @default(now()) @map("subscribed_at")

  @@unique([userId, deviceToken])
  @@map("push_subscriptions")
}
